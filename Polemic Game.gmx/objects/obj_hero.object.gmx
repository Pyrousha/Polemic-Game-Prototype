<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_reset(8,true);

up = ord('W');
down = ord('S');
left = ord('A');
right = ord('D');
hSpd = 0;
vSpd = 0;
accel = 1;
moveSpd = 5;
ff = 1;

weaponList = ds_list_create();
allyList = ds_list_create();
//ds_list_add(weaponList,obj_sword);
//ds_list_add(weaponList,obj_gun);
//ds_list_add(weaponList,obj_tommyGun);
equippedIndex = 0;
nextEquippedIndex = 0;
if(ds_list_size(weaponList) &lt; 1)
{
    weapon = noone;
}
else
{
    weapon = instance_create(x,y,ds_list_find_value(weaponList,equippedIndex));
    weaponName = object_get_name(weapon.object_index);
}

swordState = "right";
shootSpeed = 15;
shootTimer = 0;
canShoot = "true";
bulletCounter = 3;
bulletInterval = 3;

dead = "false";

//HP + bar variables
maxHp = 20;
hp = maxHp;
borderSize = 2;
barWidth = 24;
barHeight = 8;
yOffset = 32;
hpOpacity = 0.8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
x = startX;
y = startY;
dead = "false";
swordState = "right";
canShoot = "true";
shootTimer = 0;
equippedIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bulletDir = point_direction(x+sprite_width/2,y+sprite_height/2,mouse_x,mouse_y);
bulletSpacing = 24
bulletX = (x+sprite_width/2) + bulletSpacing*dcos(bulletDir);
bulletY = (y+sprite_height/2) - bulletSpacing*dsin(bulletDir);
with(instance_create(0,0,obj_bullet))
{
    x = obj_hero.bulletX;
    y = obj_hero.bulletY;
    direction = obj_hero.bulletDir;
    damage = obj_hero.weapon.damage;
}
bulletCounter--;
if (bulletCounter &gt; 0)
{
    alarm[0] = bulletInterval;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead == "true")
{
    exit;
}
//Friction Y
if (!(keyboard_check(up)) &amp;&amp; !(keyboard_check(down)))
{
    if (vSpd &gt; 0)
    {
        vSpd = max(0,vSpd-ff);
    }
    else
    {
        vSpd = min(0,vSpd+ff);
    }
}
//Friction X
if (!(keyboard_check(left)) &amp;&amp; !(keyboard_check(right)))
{
    if (hSpd &gt; 0)
    {
        hSpd = max(0,hSpd-ff);
    }
    else
    {
        hSpd = min(0,hSpd+ff);
    }
}
//Input
if ((keyboard_check(up)) &amp;&amp; !(keyboard_check(down)))
{
    vSpd += accel;
}
if ((keyboard_check(down)) &amp;&amp; !(keyboard_check(up)))
{
    vSpd -= accel;
}
if ((keyboard_check(left))&amp;&amp; !(keyboard_check(right)))
{
    hSpd -= accel;
}
if ((keyboard_check(right))&amp;&amp; !(keyboard_check(left)))
{
    hSpd += accel;
}

//cap movement Y
if (vSpd &gt; 0)
{
    vSpd = min(moveSpd,vSpd);
}
else
{
    vSpd = max(0-moveSpd,vSpd);
}
//cap movement X
if (hSpd &gt; 0)
{
    hSpd = min(moveSpd,hSpd);
}
else
{
    hSpd = max(0-moveSpd,hSpd);
}

//Collision X
inst = (collision_rectangle(x+hSpd,y,x,y+sprite_height-1,obj_wall,false,true)) //Left
if (inst != noone)
{
    hSpd = (inst.x+inst.sprite_width)-x;
}
inst = (collision_rectangle(x+sprite_width-1+hSpd,y,x+sprite_width-1,y+sprite_height-1,obj_wall,false,true)) //Right
if (inst != noone)
{
    hSpd = inst.x-(sprite_width+x);
}
//Collision Y
inst = (collision_rectangle(x,y-vSpd,x+sprite_width-1,y,obj_wall,false,true)) //Up
if (inst != noone)
{
    vSpd = y-(inst.sprite_height+inst.y);
}
inst = (collision_rectangle(x,y+sprite_height-1-vSpd,x+sprite_width-1,y+sprite_height-1,obj_wall,false,true)) //Down
if (inst != noone)
{
    vSpd = (y+sprite_height)-inst.y;
}

//Update position
y-=vSpd;
x+=hSpd;

//weaponName = object_get_name(weapon.object_index); //For debugging

//Weapon switching
if((keyboard_check_pressed(vk_shift)) || (mouse_wheel_up()) || (mouse_wheel_down()))
{
    if ((equippedIndex + 1) &gt;= (ds_list_size(weaponList)))
    {
        nextEquippedIndex = equippedIndex - (ds_list_size(weaponList) - 1);
    }
    else
    {
        nextEquippedIndex = equippedIndex + 1;
    }
    //Debug cuz this shit isn't working
    show_debug_message("eqIndex: " +string(equippedIndex) + ", nEqIndex: " + string(nextEquippedIndex) + ", weapon: " + object_get_name(weapon.object_index) 
    + ", weaponAtIndex: " + object_get_name(ds_list_find_value(weaponList, equippedIndex)) + ", nextWeaponAtIndex: " + object_get_name(ds_list_find_value(weaponList, nextEquippedIndex)));
    
    if ((weapon.object_index != obj_sword) || ((weapon.object_index == obj_sword) &amp;&amp; (((swordState == "right") || (swordState == "left")))))
    {
        with(weapon)
        {
            instance_destroy();
        }
        weapon = instance_create(x+sprite_width/2,y+sprite_height/2,ds_list_find_value(weaponList, nextEquippedIndex));
        equippedIndex = nextEquippedIndex;
        show_debug_message("switching from " + object_get_name(weapon.object_index) + " to " + object_get_name(ds_list_find_value(weaponList, equippedIndex)) + " eqIndex is " + string(equippedIndex));
    }
}

//weapon stuff
if (weapon != noone)
{
    weapon.x = x+sprite_width/2;
    weapon.y = y+sprite_height/2;
    switch (weapon.object_index)
    {
        case (obj_sword): //sword equipped
        {
            switch (swordState)
            {
                case ("right"):
                {
                    weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)-90;
                    break;
                }
                case ("left"):
                {
                    weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)+90;
                    break;
                }
                case ("RtoL"):
                {
                    weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)-90;
                    if (weapon.image_index == (sprite_get_number(spr_sword_swing_left) -1))
                    {
                        weapon.sprite_index = spr_sword;
                        swordState = "left";
                        weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)+90;
                    }
                    break;
                }
                case ("LtoR"):
                {   
                    weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)+90;
                    if (weapon.image_index == (sprite_get_number(spr_sword_swing_right) -1))
                    {
                        weapon.sprite_index = spr_sword;
                        swordState = "right";
                        weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)-90;
                    }
                    break;
                }   
            }
            break;
        }
        case (obj_gun): //gun equipped
        {
            weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y);
            //Reloading
            if (canShoot == "false")
            {
                if (shootTimer &lt;= 0)
                {
                    canShoot = "true";
                }
                else
                {
                    shootTimer--;
                }
            }
            break;
        }
        case (obj_tommyGun): //tommy-gun equipped
        {
            weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y);
            //Reloading
            if (canShoot == "false")
            {
                if (shootTimer &lt;= 0)
                {
                    canShoot = "true";
                }
                else
                {
                    shootTimer--;
                }
            }
            break;
        }
    }
    //Weapon and depth
    if (weapon.image_angle&lt;0)
    {
        weapon.image_angle+=360;
    }
    if (weapon.image_angle&gt;=360)
    {
        weapon.image_angle-=360;
    }
    if (weapon.image_angle &lt; 180)
    {
        weapon.depth = 1;
    }
    else
    {
        weapon.depth = -1;
    }
    //Weapon mirror (if aplicable)
    if ((weapon.object_index == obj_gun)||(weapon.object_index==obj_tommyGun))
    {
        if ((weapon.image_angle &gt; 90) &amp;&amp; (weapon.image_angle &lt;=270))
        {
            weapon.image_yscale = -1;
        }
        else
        {
            weapon.image_yscale = 1;
        }
    }
}

//show_debug_message("weapon.image_angle: "+ string(weapon.image_angle));
//show_debug_message("vSpd: "+string(vSpd));
//show_debug_message("hSpd: "+string(hSpd));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Taking Damage
bulletInst = collision_rectangle(x,y,x+sprite_width-1,y+sprite_height-1,obj_bullet_enemy,false,true);
if (bulletInst != noone)
{
    hp -= bulletInst.damage;
    with (bulletInst)
    {
        instance_destroy();
    }
    if (hp &lt;= 0)
    {
        audio_play_sound(snd_death, 10, false);
        dead = "true";
        alarm[1] = 5*60;
        with(weapon)
        {
            instance_destroy();
        }
    }
}
else
{
    swordInst = collision_rectangle(x,y,x+sprite_width-1,y+sprite_height-1,obj_swing_hitbox_enemy,false,true);
    if(swordInst != noone)
    {
        if (!instance_exists(swordInst.swordBlade))
        {
            with (swordInst)
            {
                instance_destroy();
            }
            exit;
        }
        swordInst = swordInst.swordBlade;
        if (ds_list_find_index(swordInst.hitList,self) == -1)
        {
            ds_list_add(swordInst.hitList,self);
            hp -= swordInst.damage;
            if (hp &lt;= 0)
            {
                dead = "true";
                audio_play_sound(snd_death, 10, false);
                alarm[1] = 5*60;
                with(weapon)
                {
                    instance_destroy();
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tommyGun_pickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_add(weaponList,obj_tommyGun);
equippedIndex = ds_list_find_index(weaponList,obj_tommyGun);
with(weapon)
{
    instance_destroy();
}
weapon = instance_create(x,y,ds_list_find_value(weaponList,equippedIndex));
weaponName = object_get_name(weapon.object_index);
//scr_text("use the mouse wheel or shift to change weapons",1,x,y);
with (obj_tommyGun_pickup)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gun_pickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_add(weaponList,obj_gun);
equippedIndex++;
with(weapon)
{
    instance_destroy();
}
weapon = instance_create(x,y,ds_list_find_value(weaponList,equippedIndex));
weaponName = object_get_name(weapon.object_index);
scr_text("use the mouse wheel or shift to change weapons",1,x,y);
with (obj_gun_pickup)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_sword_pickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_add(weaponList,obj_sword);
weapon = instance_create(x,y,ds_list_find_value(weaponList,equippedIndex));
weaponName = object_get_name(weapon.object_index);
with (obj_sword_pickup)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((weapon == noone) || (visible = false) || (dead = "true"))
{
    exit;
}
bulletDir = point_direction(x+sprite_width/2,y+sprite_height/2,mouse_x,mouse_y);
switch(weapon.object_index)
{
    case (obj_sword):
    {
        switch (swordState)
        {
            case ("right"):
            {
                swordState = "RtoL";
                weapon.sprite_index = spr_sword_swing_left;
                with (instance_create(x+sprite_width/2,y+sprite_height/2,obj_swing_hitbox))
                {
                    swordBlade = obj_hero.weapon;
                }
                break;
            }
            case ("left"):
            {
                swordState = "LtoR";
                weapon.sprite_index = spr_sword_swing_right;
                with (instance_create(x+sprite_width/2,y+sprite_height/2,obj_swing_hitbox))
                {
                    swordBlade = obj_hero.weapon;
                }
                break;
            }
        }
        break;
    }
    case (obj_gun):
    {
        if (canShoot == "true")
        {
            bulletX = (x+sprite_width/2) + 32*dcos(bulletDir);
            bulletY = (y+sprite_height/2) - 32*dsin(bulletDir);
            with(instance_create(0,0,obj_bullet))
            {
                x = obj_hero.bulletX;
                y = obj_hero.bulletY;
                direction = obj_hero.bulletDir;
                damage = obj_hero.weapon.damage;
            }
            shootTimer = shootSpeed;
            canShoot = "false";
        }
        break;
    }
    case (obj_tommyGun):
    {
        if (canShoot == "true")
        {
            bulletSpacing = 24
            bulletX = (x+sprite_width/2) + bulletSpacing*dcos(bulletDir);
            bulletY = (y+sprite_height/2) - bulletSpacing*dsin(bulletDir);
            with(instance_create(0,0,obj_bullet))
            {
                x = obj_hero.bulletX;
                y = obj_hero.bulletY;
                direction = obj_hero.bulletDir;
                damage = obj_hero.weapon.damage;
            }
            alarm[0] = bulletInterval;
            bulletCounter = 3;
            shootTimer = (shootSpeed*2)/3;
            canShoot = "false";
        }
        break;
    }
    case (obj_shotGun):
    {
        if (canShoot == "true")
        {
            for(i = -1; i&lt;2; i++)
            {
                bulletX = (x+sprite_width/2) + (24*i)*dcos(bulletDir);
                bulletY = (y+sprite_height/2) - (24*i)*dsin(bulletDir);
                with(instance_create(0,0,obj_bullet))
                {
                    x = obj_hero.bulletX;
                    y = obj_hero.bulletY;
                    direction = obj_hero.bulletDir + (10*obj_hero.i);
                    damage = obj_hero.weapon.damage;
                }   
            }
            shootTimer = shootSpeed/2;
            canShoot = "false";
        }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>swordState = "right";
canShoot = "true";
shootTimer = 0;
equippedIndex = 0;
if(ds_list_size(weaponList) &lt; 1)
{
    weapon = noone;
}
else
{
    weapon = instance_create(x,y,ds_list_find_value(weaponList,equippedIndex));
    weaponName = object_get_name(weapon.object_index);
    weapon.visible = false;
}
hp = maxHp;
visible = false;
switch(room)
{
    case (rm_entrance):
    {
        visible = true;
        break;
    }
    case (room0):
    {
        x = 32;
        y = 480;
        visible = true;
        if (weapon != noone)
        {
            weapon.visible = true;
        }
        break;
    }
    case (room1):
    {
        x = 128;
        y = 704;
        visible = true;
        if (weapon != noone)
        {
            weapon.visible = true;
        }
        break;
    }
    case (room2):
    {
        x = 32;
        y = 1660;
        visible = true;
        if (weapon != noone)
        {
            weapon.visible = true;
        }
        break;
    }
    case (FinalRoom):
    {
        x = 448;
        y = 736;
        visible = true;
        if (weapon != noone)
        {
            weapon.visible = true;
        }
        break;
    }
}

if ((room != rm_entrance) &amp;&amp; (visible == true))
{
    instance_create(x,y,obj_UI);
}

if ((ds_list_size(allyList) &gt;= 1) &amp;&amp; (visible = true))
{
    for (j = 0; j&lt;ds_list_size(allyList); j++)
    {
        allyInst = instance_create(x+32*j,y+32*j,obj_ally);
        allyInst.weapon = instance_create(x,y,ds_list_find_value(allyList,j));
        with (allyInst)
        {
            show_debug_message("aftercreate");
            weapon.damage = damage;
            weapon.parent = self;
            shootSpeed = weapon.shootSpeed;
        }
    }
}

startX = x;
startY = y;
/*swordState = "right";
shootSpeed = 15;
shootTimer = 0;
canShoot = "true";
bulletCounter = 3;
bulletInterval = 3;

dead = "false";

//HP + bar variables
maxHp = 20;
hp = maxHp;
borderSize = 2;
barWidth = 24;
barHeight = 8;
yOffset = 32;
hpOpacity = 0.8;*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead == "false")
{
    draw_self();
    hSize = obj_hero.sprite_width/2;
    draw_set_alpha(hpOpacity);
    //Outline
    draw_set_colour(c_black);
    draw_rectangle(x-barWidth-borderSize+hSize,y-yOffset-barHeight-borderSize,x+barWidth+borderSize+hSize,y-yOffset+barHeight+borderSize,false)
    draw_set_colour(c_green);
    draw_rectangle(x-barWidth+hSize,y-yOffset-barHeight,x-barWidth+(barWidth*2*(hp/maxHp))+hSize,y-yOffset+barHeight,false)

    draw_set_alpha(1);
    draw_set_colour(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
