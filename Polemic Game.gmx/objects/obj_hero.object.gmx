<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>up = ord('W');
down = ord('S');
left = ord('A');
right = ord('D');
hSpd = 0;
vSpd = 0;
accel = 1;
moveSpd = 5;
ff = 1;
weapon = instance_create(x,y,obj_sword);
swordState = "right";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Friction Y
if (!(keyboard_check(up)) &amp;&amp; !(keyboard_check(down)))
{
    if (vSpd &gt; 0)
    {
        vSpd = max(0,vSpd-ff);
    }
    else
    {
        vSpd = min(0,vSpd+ff);
    }
}
//Friction X
if (!(keyboard_check(left)) &amp;&amp; !(keyboard_check(right)))
{
    if (hSpd &gt; 0)
    {
        hSpd = max(0,hSpd-ff);
    }
    else
    {
        hSpd = min(0,hSpd+ff);
    }
}
//Input
if ((keyboard_check(up)) &amp;&amp; !(keyboard_check(down)))
{
    vSpd += accel;
}
if ((keyboard_check(down)) &amp;&amp; !(keyboard_check(up)))
{
    vSpd -= accel;
}
if ((keyboard_check(left))&amp;&amp; !(keyboard_check(right)))
{
    hSpd -= accel;
}
if ((keyboard_check(right))&amp;&amp; !(keyboard_check(left)))
{
    hSpd += accel;
}

//cap movement Y
if (vSpd &gt; 0)
{
    vSpd = min(moveSpd,vSpd);
}
else
{
    vSpd = max(0-moveSpd,vSpd);
}
//cap movement X
if (hSpd &gt; 0)
{
    hSpd = min(moveSpd,hSpd);
}
else
{
    hSpd = max(0-moveSpd,hSpd);
}

//Collision X
inst = (collision_rectangle(x+hSpd,y,x,y+sprite_height-1,obj_wall,false,true)) //Left
if (inst != noone)
{
    hSpd = (inst.x+inst.sprite_width)-x;
}
inst = (collision_rectangle(x+sprite_width-1+hSpd,y,x+sprite_width-1,y+sprite_height-1,obj_wall,false,true)) //Right
if (inst != noone)
{
    hSpd = inst.x-(sprite_width+x);
}
//Collision Y
inst = (collision_rectangle(x,y-vSpd,x+sprite_width-1,y,obj_wall,false,true)) //Up
if (inst != noone)
{
    vSpd = y-(inst.sprite_height+inst.y);
}
inst = (collision_rectangle(x,y+sprite_height-1-vSpd,x+sprite_width-1,y+sprite_height-1,obj_wall,false,true)) //Down
if (inst != noone)
{
    vSpd = (y+sprite_height)-inst.y;
}

//Update position
y-=vSpd;
x+=hSpd;

//weapon position
if (weapon != noone)
{
    weapon.x = x+sprite_width/2;
    weapon.y = y+sprite_height/2;
    switch (swordState)
    {
        case ("right"):
        {
            weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)-75;
            weapon.depth = -1;
            break;
        }
        case ("left"):
        {
            weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)+75;
            weapon.depth = 1;
            break;
        }
    }
    
}
//show_debug_message("vSpd: "+string(vSpd));
//show_debug_message("hSpd: "+string(hSpd));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (swordState)
{
    case ("right"):
    {
        swordState = "left";
        break;
    }
    case ("left"):
    {
        swordState = "right";
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
