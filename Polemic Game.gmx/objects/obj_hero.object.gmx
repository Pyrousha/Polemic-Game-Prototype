<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_reset(8,true);

up = ord('W');
down = ord('S');
left = ord('A');
right = ord('D');
hSpd = 0;
vSpd = 0;
accel = 1;
moveSpd = 5;
ff = 1;
weapon = instance_create(x,y,obj_gun);
swordState = "right";
shootSpeed = 15;
shootTimer = 0;
canShoot = "true";
bulletCounter = 3;
bulletInterval = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bulletDir = point_direction(x+sprite_width/2,y+sprite_height/2,mouse_x,mouse_y);
bulletSpacing = 24
bulletX = (x+sprite_width/2) + bulletSpacing*dcos(bulletDir);
bulletY = (y+sprite_height/2) - bulletSpacing*dsin(bulletDir);
with(instance_create(0,0,obj_bullet))
{
    x = obj_hero.bulletX;
    y = obj_hero.bulletY;
    direction = obj_hero.bulletDir;
}
bulletCounter--;
if (bulletCounter &gt; 0)
{
    alarm[0] = bulletInterval;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Friction Y
if (!(keyboard_check(up)) &amp;&amp; !(keyboard_check(down)))
{
    if (vSpd &gt; 0)
    {
        vSpd = max(0,vSpd-ff);
    }
    else
    {
        vSpd = min(0,vSpd+ff);
    }
}
//Friction X
if (!(keyboard_check(left)) &amp;&amp; !(keyboard_check(right)))
{
    if (hSpd &gt; 0)
    {
        hSpd = max(0,hSpd-ff);
    }
    else
    {
        hSpd = min(0,hSpd+ff);
    }
}
//Input
if ((keyboard_check(up)) &amp;&amp; !(keyboard_check(down)))
{
    vSpd += accel;
}
if ((keyboard_check(down)) &amp;&amp; !(keyboard_check(up)))
{
    vSpd -= accel;
}
if ((keyboard_check(left))&amp;&amp; !(keyboard_check(right)))
{
    hSpd -= accel;
}
if ((keyboard_check(right))&amp;&amp; !(keyboard_check(left)))
{
    hSpd += accel;
}

//cap movement Y
if (vSpd &gt; 0)
{
    vSpd = min(moveSpd,vSpd);
}
else
{
    vSpd = max(0-moveSpd,vSpd);
}
//cap movement X
if (hSpd &gt; 0)
{
    hSpd = min(moveSpd,hSpd);
}
else
{
    hSpd = max(0-moveSpd,hSpd);
}

//Collision X
inst = (collision_rectangle(x+hSpd,y,x,y+sprite_height-1,obj_wall,false,true)) //Left
if (inst != noone)
{
    hSpd = (inst.x+inst.sprite_width)-x;
}
inst = (collision_rectangle(x+sprite_width-1+hSpd,y,x+sprite_width-1,y+sprite_height-1,obj_wall,false,true)) //Right
if (inst != noone)
{
    hSpd = inst.x-(sprite_width+x);
}
//Collision Y
inst = (collision_rectangle(x,y-vSpd,x+sprite_width-1,y,obj_wall,false,true)) //Up
if (inst != noone)
{
    vSpd = y-(inst.sprite_height+inst.y);
}
inst = (collision_rectangle(x,y+sprite_height-1-vSpd,x+sprite_width-1,y+sprite_height-1,obj_wall,false,true)) //Down
if (inst != noone)
{
    vSpd = (y+sprite_height)-inst.y;
}

//Update position
y-=vSpd;
x+=hSpd;

//Weapon switching
if((keyboard_check_pressed(vk_shift)) || (mouse_wheel_up()) || (mouse_wheel_down()))
{
    switch(weapon.object_index)
    {
        case (obj_sword): //Sword to gun
        {
            if ((swordState == "right") || (swordState == "left"))
            {
                with(weapon)
                {
                    instance_destroy();
                }
                weapon = instance_create(x+sprite_width/2,y+sprite_height/2,obj_gun);
            }
            break;
        }
        case (obj_gun): //Gun to Tommy
        {
            with(weapon)
            {
                instance_destroy();
            }
            weapon = instance_create(x+sprite_width/2,y+sprite_height/2,Obj_TommyGun);
            break;
        }
        case (Obj_TommyGun): //Tommy to sword
        {
            with(weapon)
            {
                instance_destroy();
            }
            weapon = instance_create(x+sprite_width/2,y+sprite_height/2,obj_sword);
            break;
        }
    }
}

//weapon stuff
if (weapon != noone)
{
    weapon.x = x+sprite_width/2;
    weapon.y = y+sprite_height/2;
    switch (weapon.object_index)
    {
        case (obj_sword): //sword equipped
        {
            switch (swordState)
            {
                case ("right"):
                {
                    weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)-90;
                    break;
                }
                case ("left"):
                {
                    weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)+90;
                    break;
                }
                case ("RtoL"):
                {
                    weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)-90;
                    if (weapon.image_index == (sprite_get_number(spr_sword_swing_left) -1))
                    {
                        weapon.sprite_index = spr_sword;
                        swordState = "left";
                        weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)+90;
                    }
                    break;
                }
                case ("LtoR"):
                {   
                    weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)+90;
                    if (weapon.image_index == (sprite_get_number(spr_sword_swing_right) -1))
                    {
                        weapon.sprite_index = spr_sword;
                        swordState = "right";
                        weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y)-90;
                    }
                    break;
                }   
            }
            break;
        }
        case (obj_gun): //gun equipped
        {
            weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y);
            //Reloading
            if (canShoot == "false")
            {
                if (shootTimer &lt;= 0)
                {
                    canShoot = "true";
                }
                else
                {
                    shootTimer--;
                }
            }
            break;
        }
        case (Obj_TommyGun): //tommy-gun equipped
        {
            weapon.image_angle = point_direction(x+sprite_width/2, y+sprite_height/2, mouse_x, mouse_y);
            //Reloading
            if (canShoot == "false")
            {
                if (shootTimer &lt;= 0)
                {
                    canShoot = "true";
                }
                else
                {
                    shootTimer--;
                }
            }
            break;
        }
    }
    //Weapon and depth
    if (weapon.image_angle&lt;0)
    {
        weapon.image_angle+=360;
    }
    if (weapon.image_angle&gt;=360)
    {
        weapon.image_angle-=360;
    }
    if (weapon.image_angle &lt; 180)
    {
        weapon.depth = 1;
    }
    else
    {
        weapon.depth = -1;
    }
    //Weapon mirror (if aplicable)
    if ((weapon.object_index == obj_gun)||(weapon.object_index==Obj_TommyGun))
    {
        if ((weapon.image_angle &gt; 90) &amp;&amp; (weapon.image_angle &lt;=270))
        {
            weapon.image_yscale = -1;
        }
        else
        {
            weapon.image_yscale = 1;
        }
    }
}

show_debug_message("weapon.image_angle: "+ string(weapon.image_angle));
//show_debug_message("vSpd: "+string(vSpd));
//show_debug_message("hSpd: "+string(hSpd));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bulletDir = point_direction(x+sprite_width/2,y+sprite_height/2,mouse_x,mouse_y);
switch(weapon.object_index)
{
    case (obj_sword):
    {
        switch (swordState)
        {
            case ("right"):
            {
                swordState = "RtoL";
                weapon.sprite_index = spr_sword_swing_left;
                instance_create(x+sprite_width/2,y+sprite_height/2,obj_swing_hitbox);
                break;
            }
            case ("left"):
            {
                swordState = "LtoR";
                weapon.sprite_index = spr_sword_swing_right;
                instance_create(x+sprite_width/2,y+sprite_height/2,obj_swing_hitbox);
                break;
            }
        }
        break;
    }
    case (obj_gun):
    {
        if (canShoot == "true")
        {
            bulletX = (x+sprite_width/2) + 32*dcos(bulletDir);
            bulletY = (y+sprite_height/2) - 32*dsin(bulletDir);
            with(instance_create(0,0,obj_bullet))
            {
                x = obj_hero.bulletX;
                y = obj_hero.bulletY;
                direction = obj_hero.bulletDir;
            }
            shootTimer = shootSpeed;
            canShoot = "false";
        }
        break;
    }
    case (Obj_TommyGun):
    {
        if (canShoot == "true")
        {
            bulletSpacing = 24
            bulletX = (x+sprite_width/2) + bulletSpacing*dcos(bulletDir);
            bulletY = (y+sprite_height/2) - bulletSpacing*dsin(bulletDir);
            with(instance_create(0,0,obj_bullet))
            {
                x = obj_hero.bulletX;
                y = obj_hero.bulletY;
                direction = obj_hero.bulletDir;
            }
            alarm[0] = bulletInterval;
            bulletCounter = 3;
            shootTimer = (shootSpeed*2)/3;
            canShoot = "false";
        }
        break;
    }
    case (Obj_shotGun):
    {
        if (canShoot == "true")
        {
            for(i = -1; i&lt;2; i++)
            {
                bulletX = (x+sprite_width/2) + (24*i)*dcos(bulletDir);
                bulletY = (y+sprite_height/2) - (24*i)*dsin(bulletDir);
                with(instance_create(0,0,obj_bullet))
                {
                    x = obj_hero.bulletX;
                    y = obj_hero.bulletY;
                    direction = obj_hero.bulletDir + (10*obj_hero.i);
                }   
            }
            shootTimer = shootSpeed/2;
            canShoot = "false";
        }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
