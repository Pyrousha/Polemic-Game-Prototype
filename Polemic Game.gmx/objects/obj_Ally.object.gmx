<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_ally</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "follow";
hsp=0;
vsp=0;

aggroRange = 300;
//deAggroRange = aggroRange;
attackRange = 200;
followDist = sprite_width*4;
moveSpeed = 4;

iFrameWeapon = noone;

damage = 5;

swordState = "right";

//HP + bar variables
maxHp = 10;
hp = maxHp;
borderSize = 2;
barWidth = 24;
barHeight = 8;
yOffset = 32;
hpOpacity = 0.8;

//Create the path
path = path_add();
targX = x;
targY = y;

//Gun properties
shootSpeed = 20;
shootTimer = 0;
canShoot = "true";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>heroX = obj_hero.x+obj_hero.sprite_width/2;
heroY = obj_hero.y+obj_hero.sprite_height/2;
inst = instance_nearest(x, y, obj_enemy);
if (inst != noone)
{
    if (point_distance(x,y,inst.x,inst.y) &gt; aggroRange)
    {
        inst = noone;
    }
    else
    {
        targX = inst.x;
        targY = inst.y;
    }
}
//weapon stuff
if (weapon != noone)
{
    weapon.x = x;
    weapon.y = y;
    switch (weapon.object_index.type)
    {
        case ("melee"): //sword equipped
        {
            switch (swordState)
            {
                case ("right"):
                {
                    weapon.image_angle = point_direction(x, y, targX, targY)-90;
                    break;
                }
                case ("left"):
                {
                    weapon.image_angle = point_direction(x, y, targX, targY)+90;
                    break;
                }
                case ("RtoL"):
                {
                    weapon.image_angle = point_direction(x, y, targX, targY)-90;
                    if (weapon.image_index == (sprite_get_number(spr_sword_swing_left) -1))
                    {
                        weapon.sprite_index = spr_sword;
                        swordState = "left";
                        weapon.image_angle = point_direction(x, y, targX, targY)+90;
                    }
                    break;
                }
                case ("LtoR"):
                {   
                    weapon.image_angle = point_direction(x, y, targX, targY)+90;
                    if (weapon.image_index == (sprite_get_number(spr_sword_swing_right) -1))
                    {
                        weapon.sprite_index = spr_sword;
                        swordState = "right";
                        weapon.image_angle = point_direction(x, y, targX, targY)-90;
                    }
                    break;
                }   
            }
            break;
        }
        case ("gun"):
        {
            weapon.image_angle = point_direction(x, y, targX, targY);
            //Reloading
            if (canShoot == "false")
            {
                if (shootTimer &lt;= 0)
                {
                    canShoot = "true";
                }
                else
                {
                    shootTimer--;
                }
            }
            break;
        }
    }
    //Weapon and depth
    if (weapon.image_angle&lt;0)
    {
        weapon.image_angle+=360;
    }
    if (weapon.image_angle&gt;=360)
    {
        weapon.image_angle-=360;
    }
    if (weapon.image_angle &lt; 180)
    {
        weapon.depth = 1;
    }
    else
    {
        weapon.depth = -1;
    }
    //Weapon mirror (if aplicable)
    if (weapon.object_index.type == "gun")
    {
        if ((weapon.image_angle &gt; 90) &amp;&amp; (weapon.image_angle &lt;=270))
        {
            weapon.image_yscale = -1;
        }
        else
        {
            weapon.image_yscale = 1;
        }
    }
}

switch (state)
{
    case ("follow"):
    {
        if (inst != noone)
        {
            if (point_distance(x,y,targX,targY) &lt; aggroRange) 
            {
                state = "attack";
                var tx = (((targX) div 32)*32);
                var ty = (((targY) div 32)*32);
                if (mp_grid_path(global.grid, path, x, y, tx, ty, 1))
                {
                    path_start(path,moveSpeed,path_action_stop,false);
                }
                break;
            }
        }
        if (point_distance(x,y,heroX,heroY) &gt; followDist)
        {
            var tx = (((heroX) div 32)*32 +16);
            var ty = (((heroY) div 32)*32 +16);

            if (mp_grid_path(global.grid, path, x, y, tx, ty, 1))
            {
                path_start(path,moveSpeed,path_action_stop,false);
            }
        }
    }
    case ("attack"):
    {
        if (inst == noone)
        {
            state = "follow";
            break;
        }
        if (point_distance(x,y,targX,targY) &lt;= attackRange)
        {
            if (collision_line(x,y,targX,targY,obj_wall,false,true))
            {
                var tx = (((targX) div 32)*32);
                var ty = (((targY) div 32)*32);
                if (mp_grid_path(global.grid, path, x, y, tx, ty, 1))
                {
                    path_start(path,moveSpeed,path_action_stop,false);
                }
                break;
            }
            if (weapon != noone)
            {
                if (weapon.type == "melee")
                {
                    switch (swordState)
                    {
                        case ("right"):
                        {
                            swordState = "RtoL";
                            weapon.sprite_index = spr_sword_swing_left;
                            hitbox = (instance_create(x,y,obj_swing_hitbox_enemy))
                            hitbox.parent = self;
                            hitbox.damage = damage;
                            hitbox.direction = point_direction(x,y,obj_hero.x+obj_hero.sprite_width/2,obj_hero.y+obj_hero.sprite_height/2);
                            hitbox.image_angle = hitbox.direction - 90;
                            hitbox.swordBlade = weapon;
                            path_end();
                            break;
                        }
                        case ("left"):
                        {
                            swordState = "LtoR";
                            weapon.sprite_index = spr_sword_swing_right;
                            hitbox = (instance_create(x,y,obj_swing_hitbox_enemy))
                            hitbox.parent = self;
                            hitbox.damage = damage;
                            hitbox.direction = point_direction(x,y,obj_hero.x+obj_hero.sprite_width/2,obj_hero.y+obj_hero.sprite_height/2);
                            hitbox.image_angle = hitbox.direction - 90;
                            hitbox.swordBlade = weapon;
                            path_end();
                            break;
                        }
                    }
                }
                else if (weapon.type == "gun")
                {
                    if (canShoot == "true")
                    {
                        bulletDir = point_direction(x,y,targX,targY);
                        bulletX = (x) + 32*dcos(bulletDir);
                        bulletY = (y) - 32*dsin(bulletDir);
                        bullet = (instance_create(0,0,obj_bullet))
                        {
                            bullet.x = bulletX;
                            bullet.y = bulletY;
                            bullet.direction = bulletDir;
                            bullet.damage = weapon.damage;
                        }
                        shootTimer = shootSpeed;
                        canShoot = "false";
                    }
                }
            }
        }
        else
        {
            var tx = (((targX) div 32)*32);
            var ty = (((targY) div 32)*32);
            if (mp_grid_path(global.grid, path, x, y, tx, ty, 1))
            {
                path_start(path,moveSpeed,path_action_stop,false);
            }
            break;
        }
        if (point_distance(x,y,heroX,heroY) &gt; 2*followDist)
        {
            var tx = (((heroX) div 32)*32 +16);
            var ty = (((heroY) div 32)*32 +16);

            if (mp_grid_path(global.grid, path, x, y, tx, ty, 1))
            {
                path_start(path,moveSpeed,path_action_stop,false);
            }
            break;
        }
        break;
    }
}

//Taking Damage
bulletInst = collision_rectangle(x,y,x+sprite_width-1,y+sprite_height-1,obj_bullet_enemy,false,true);
if (bulletInst != noone)
{
    hp -= bulletInst.damage;
    with (bulletInst)
    {
        instance_destroy();
    }
    if (hp &lt;= 0)
    {
        audio_play_sound(snd_death, 10, false);
        dead = "true";
        with(weapon)
        {
            instance_destroy();
        }
    }
}
else
{
    swordInst = collision_rectangle(x,y,x+sprite_width-1,y+sprite_height-1,obj_swing_hitbox_enemy,false,true);
    if(swordInst != noone)
    {
        if (!instance_exists(swordInst.swordBlade))
        {
            with (swordInst)
            {
                instance_destroy();
            }
            exit;
        }
        swordInst = swordInst.swordBlade;
        if (ds_list_find_index(swordInst.hitList,self) == -1)
        {
            ds_list_add(swordInst.hitList,self);
            hp -= swordInst.damage;
            if (hp &lt;= 0)
            {
                dead = "true";
                audio_play_sound(snd_death, 10, false);
                with(weapon)
                {
                    instance_destroy();
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_alpha(hpOpacity);
//Outline
draw_set_colour(c_black);
draw_rectangle(x-barWidth-borderSize,y-yOffset-barHeight-borderSize,x+barWidth+borderSize,y-yOffset+barHeight+borderSize,false)
draw_set_colour(c_blue);
draw_rectangle(x-barWidth,y-yOffset-barHeight,x-barWidth+(barWidth*2*(hp/maxHp)),y-yOffset+barHeight,false)

draw_set_alpha(1);
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
