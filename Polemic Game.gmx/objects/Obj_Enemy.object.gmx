<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = monster.ECalm;
hsp=0;
vsp=0;

aggroRange = 500;
attackRange = 80;

iFrameWeapon = noone;

weapon = noone;

weap = (collision_rectangle(x-sprite_width/2,y-sprite_height/2,x+sprite_width/2,y+sprite_height/2, obj_eSwordItem,false, true)); //Sword
if (weap != noone)
{
    weapon = instance_create(x,y,obj_sword_enemy);
    with (weap)
    {
        instance_destroy();
    }
    maxHp = 12;
    attackRange = 96;
    moveSpeed = 3;
    damage = 5;
}
else
{ 
    weap = (collision_rectangle(x-sprite_width/2,y-sprite_height/2,x+sprite_width/2,y+sprite_height/2, obj_eGunItem,false, true)); //gun
    if (weap != noone)
    {
        weapon = instance_create(x,y,obj_gun_enemy);
        with (weap)
        {
            instance_destroy();
        }
        maxHp = 10;
        attackRange = 500;
        moveSpeed = 3;
        shootSpeed = 60;
        damage = 3;
        sprite_index = spr_gunner;
    }
    else
    { 
        weap = (collision_rectangle(x-sprite_width/2,y-sprite_height/2,x+sprite_width/2,y+sprite_height/2, obj_eTommyGunItem,false, true)); //tommygun
        if (weap != noone)
        {
            weapon = instance_create(x,y,obj_tommyGun_enemy);
            with (weap)
            {
                instance_destroy();
            }
            maxHp = 8;
            attackRange = 400;
            moveSpeed = 2;
            shootSpeed = 30;
            damage = 2;
            sprite_index = spr_gunner;
        }
    }
}

if (weapon != noone)
{
    weapon.parent = self;
}
else //Weapon is fist
{
    weapon = instance_create(x,y,obj_fists_enemy);
    damage = 4;
    weapon.parent = self;
    maxHp = 15;
    moveSpeed = 4;
}
weapon.damage = damage;

swordState = "right";

//HP + bar variables
hp = maxHp;
borderSize = 2;
barWidth = 24;
barHeight = 8;
yOffset = 32;
hpOpacity = 0.8;

//Create the path
path = path_add();

pathSpd = 0;

//Gun properties
shootTimer = 0;
canShoot = "true";
bulletSpeed = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>heroX = obj_hero.x + obj_hero.sprite_width/2;
heroY = obj_hero.y + obj_hero.sprite_height/2;
//weapon stuff
if (weapon != noone)
{
    weapon.x = x;
    weapon.y = y;
    targX = heroX;
    targY = heroY;
    switch (weapon.object_index.type)
    {
        case ("melee"): //sword equipped
        {
            switch (swordState)
            {
                case ("right"):
                {
                    weapon.image_angle = point_direction(x, y, targX, targY)-90;
                    break;
                }
                case ("left"):
                {
                    weapon.image_angle = point_direction(x, y, targX, targY)+90;
                    break;
                }
                case ("RtoL"):
                {
                    weapon.image_angle = point_direction(x, y, targX, targY)-90;
                    if (weapon.image_index == (sprite_get_number(spr_sword_swing_left) -1))
                    {
                        weapon.sprite_index = spr_sword;
                        swordState = "left";
                        weapon.image_angle = point_direction(x, y, targX, targY)+90;
                    }
                    break;
                }
                case ("LtoR"):
                {   
                    weapon.image_angle = point_direction(x, y, targX, targY)+90;
                    if (weapon.image_index == (sprite_get_number(spr_sword_swing_right) -1))
                    {
                        weapon.sprite_index = spr_sword;
                        swordState = "right";
                        weapon.image_angle = point_direction(x, y, targX, targY)-90;
                    }
                    break;
                }   
            }
            break;
        }
        case ("gun"):
        {
            weapon.image_angle = point_direction(x, y, targX, targY);
            //Reloading
            if (canShoot == "false")
            {
                if (shootTimer &lt;= 0)
                {
                    canShoot = "true";
                }
                else
                {
                    shootTimer--;
                }
            }
            break;
        }
        case ("fist"):
        {
            weapon.image_angle = point_direction(x, y, targX, targY) - 90;
            if (weapon.image_index == (sprite_get_number(spr_fists_hit) - 1))
            {
                weapon.sprite_index = spr_fists;
            }
            break;
        }
    }
    //Weapon and depth
    if (weapon.image_angle&lt;0)
    {
        weapon.image_angle+=360;
    }
    if (weapon.image_angle&gt;=360)
    {
        weapon.image_angle-=360;
    }
    if (weapon.image_angle &lt; 180)
    {
        weapon.depth = 1;
    }
    else
    {
        weapon.depth = -1;
    }
    //Weapon mirror (if aplicable)
    if (weapon.object_index.type == "gun")
    {
        if ((weapon.image_angle &gt; 90) &amp;&amp; (weapon.image_angle &lt;=270))
        {
            weapon.image_yscale = -1;
        }
        else
        {
            weapon.image_yscale = 1;
        }
    }
}

var tx = (((heroX) div 32)*32 + 16);
var ty = (((heroY) div 32)*32 + 16);

pathGood = "false";
if (mp_grid_path(global.grid, path, x, y, tx, ty, 1)) ///Create the path and move to the player
{
    path_start(path,pathSpd,path_action_stop,false);
    pathGood = "true";
}

switch (state)
{
    case monster.ECalm:
    {
        if (pathGood = "true")
        {
            if ((path_get_length(path) &lt; aggroRange) || (hp != maxHp))
            {
                state = monster.EAggro;
                pathSpd = moveSpeed;
            }
        }
        break;
    }
    case monster.EAggro:
    {
        if (point_distance(x,y,heroX,heroY) &lt;= attackRange)
        {
            if (collision_line(x,y,targX,targY,obj_wall,false,true))
            {
                break; //Keep moving around the corner
            }
            if (weapon != noone)
            {
                switch(weapon.type)
                {
                    case ("melee"):
                    {
                        switch (swordState)
                        {
                            case ("right"):
                            {
                                swordState = "RtoL";
                                weapon.sprite_index = spr_sword_swing_left;
                                hitbox = (instance_create(x,y,obj_swing_hitbox_enemy))
                                hitbox.parent = self;
                                hitbox.damage = damage;
                                hitbox.direction = point_direction(x,y,obj_hero.x+obj_hero.sprite_width/2,obj_hero.y+obj_hero.sprite_height/2);
                                hitbox.image_angle = hitbox.direction - 90;
                                hitbox.swordBlade = weapon;
                                break;
                            }
                            case ("left"):
                            {
                                swordState = "LtoR";
                                weapon.sprite_index = spr_sword_swing_right;
                                hitbox = (instance_create(x,y,obj_swing_hitbox_enemy))
                                hitbox.parent = self;
                                hitbox.damage = damage;
                                hitbox.direction = point_direction(x,y,obj_hero.x+obj_hero.sprite_width/2,obj_hero.y+obj_hero.sprite_height/2);
                                hitbox.image_angle = hitbox.direction - 90;
                                hitbox.swordBlade = weapon;
                                break;
                            }
                        }
                        break;
                    }
                    case("gun"):
                    {
                        if (canShoot == "true")
                        {
                            bulletDir = point_direction(x,y,targX,targY);
                            bulletX = (x);
                            bulletY = (y);
                            bullet = (instance_create(0,0,obj_bullet_enemy))
                            {
                                bullet.x = bulletX;
                                bullet.y = bulletY;
                                bullet.direction = bulletDir;
                                bullet.damage = weapon.damage;
                                bullet.speed = bulletSpeed;
                            }
                            shootTimer = shootSpeed;
                            canShoot = "false";
                        }
                        break;
                    }
                    case ("fist"):
                    {
                         if (weapon.sprite_index == spr_fists)
                         {
                            weapon.sprite_index = spr_fists_hit;
                            hitbox = (instance_create(x,y,obj_fists_swing_enemy))
                            hitbox.parent = self;
                            hitbox.damage = weapon.damage;
                            hitbox.direction = point_direction(x,y,obj_hero.x+obj_hero.sprite_width/2,obj_hero.y+obj_hero.sprite_height/2);
                            hitbox.image_angle = hitbox.direction - 90;
                            hitbox.swordBlade = weapon;
                         }
                        break;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage calulation
bulletInst = collision_rectangle(x-sprite_width/2,y-sprite_height/2,x+sprite_width/2,y+sprite_height/2,obj_bullet,false,true);
if (bulletInst != noone)
{
    hp -= bulletInst.damage;
    with (bulletInst)
    {
        instance_destroy();
    }
}
else
{
    swordInst = collision_rectangle(x-sprite_width/2,y-sprite_height/2,x+sprite_width/2,y+sprite_height/2,obj_swing_hitbox,false,true);
    if(swordInst != noone)
    {
        swordInst = swordInst.swordBlade;
        if (!instance_exists(swordInst))
        {
            show_debug_message("BRUH WTF");
            exit;
        }
        if (ds_list_find_index(swordInst.hitList,self) == -1)
        {
            ds_list_add(swordInst.hitList,self);
            hp -= swordInst.damage;
        }
    }
}

if (hp &lt;= 0)
    {
        if (weapon != noone)
        {
            with (weapon)
            {
                instance_destroy();
            }
        }
        if (instance_number(obj_enemy) &lt;= 1)
        {
            instance_create(view_xview[0],view_yview[0],obj_fadeOut);
        }
        instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_alpha(hpOpacity);
//Outline
draw_set_colour(c_black);
draw_rectangle(x-barWidth-borderSize,y-yOffset-barHeight-borderSize,x+barWidth+borderSize,y-yOffset+barHeight+borderSize,false)
draw_set_colour(c_red);
draw_rectangle(x-barWidth,y-yOffset-barHeight,x-barWidth+(barWidth*2*(hp/maxHp)),y-yOffset+barHeight,false)

draw_set_alpha(1);
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
