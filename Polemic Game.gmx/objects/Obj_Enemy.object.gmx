<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_enemy</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = monster.ECalm;
hsp=0;
vsp=0;

aggroRange = 300;
deAggroRange = aggroRange;

aggroObj = instance_create(x,y,obj_aggroRange);
aggroObj.parent = self;
aggroObj.image_xscale = (aggroRange/(aggroObj.sprite_width/2));
aggroObj.image_yscale = aggroObj.image_xscale;

iFrameWeapon = noone;

//HP + bar variables
maxHp = 10;
hp = maxHp;
borderSize = 2;
barWidth = 24;
barHeight = 8;
yOffset = 32;
hpOpacity = 0.8;
//Create the path
path = path_add();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_enemy</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (state)
{
    case monster.ECalm:
    {
        if (point_distance(x,y,obj_hero.x+obj_hero.sprite_width/2,obj_hero.y+obj_hero.sprite_height/2) &lt; aggroRange) 
        {
            state = monster.EAggro;
        }
        break;
    }
    case monster.EAggro:
    {
        /*hdir = sign(obj_hero.x-x);
        vdir = sign(obj_hero.y-y);
        x += hdir*2;
        y += vdir*2;*/
        ///Create the path and move to the player
        if ((point_distance(x,y,obj_hero.x+obj_hero.sprite_width/2,obj_hero.y+obj_hero.sprite_height/2) &gt; deAggroRange) &amp;&amp; (hp = maxHp))
        {
            path_end();
            state = monster.ECalm;
        }
        else
        {
            var tx = (((obj_hero.x + obj_hero.sprite_width/2) div 32)*32 +16);
            var ty = (((obj_hero.y + obj_hero.sprite_height/2) div 32)*32 +16);

            if (mp_grid_path(global.grid, path, x, y, tx, ty, 1))
            {
                path_start(path,4,path_action_stop,false);
            }
        }
    }
}

aggroObj.x = x;
aggroObj.y = y;

bulletInst = collision_rectangle(x-sprite_width/2,y-sprite_height/2,x+sprite_width/2,y+sprite_height/2,obj_bullet,false,true);
if (bulletInst != noone)
{
    hp -= bulletInst.damage;
    with (bulletInst)
    {
        instance_destroy();
    }
    if (hp &lt;= 0)
    {
        aggroObj.fadeOut = "true";
        instance_destroy();
    }
}
else
{
    swordInst = collision_rectangle(x-sprite_width/2,y-sprite_height/2,x+sprite_width/2,y+sprite_height/2,obj_swing_hitbox,false,true);
    if(swordInst != noone)
    {
        swordInst = swordInst.swordBlade;
        if (ds_list_find_index(swordInst.hitList,self) == -1)
        {
            ds_list_add(swordInst.hitList,self);
            hp -= swordInst.damage;
            if (hp &lt;= 0)
            {
                aggroObj.fadeOut = "true";
                instance_destroy();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_alpha(hpOpacity);
//Outline
draw_set_colour(c_black);
draw_rectangle(x-barWidth-borderSize,y-yOffset-barHeight-borderSize,x+barWidth+borderSize,y-yOffset+barHeight+borderSize,false)
draw_set_colour(c_red);
draw_rectangle(x-barWidth,y-yOffset-barHeight,x-barWidth+(barWidth*2*(hp/maxHp)),y-yOffset+barHeight,false)

draw_set_alpha(1);
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
