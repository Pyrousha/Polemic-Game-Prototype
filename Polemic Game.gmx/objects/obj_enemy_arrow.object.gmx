<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_arrow_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 0;
opa = 0.75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((obj_hero.visible == true)&amp;&amp;(room != rm_entrance)
&amp;&amp;(!collision_rectangle(view_xview[0]-64,view_yview[0]-64,view_xview[0]+view_wview[0]-1 + 64,view_yview[0]+view_hview[0]-1 + 64,obj_enemy,false,true))
&amp;&amp;(instance_exists(obj_enemy)))
{
    image_alpha = min(image_alpha + 0.1, opa);
    enemyNearest = instance_nearest(x,y,obj_enemy);
    image_angle = point_direction(x,y,enemyNearest.x,enemyNearest.y);
    if ((image_angle &gt; 90 ) &amp;&amp; (image_angle &lt;= 270))
    {
        sprite_index = spr_enemy_arrow_left;
    }
    else
    {
        sprite_index = spr_enemy_arrow_right;
    }
    x = obj_hero.x + obj_hero.sprite_width/2;
    y = obj_hero.y + obj_hero.sprite_height/2;
}
else
{
    image_alpha = max(image_alpha - 0.1, 0);
}
show_debug_message("opacity: " + string(image_alpha));
//show_debug_message("looking from x =  " + string(view_xview[0]) + " to x = " + string(view_xview[0]+view_wview[0]-1));
//show_debug_message("looking from y =  " + string(view_yview[0]) + " to y = " + string(view_yview[0]+view_hview[0]-1));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
